import dedent from 'ts-dedent';
import * as svelte from 'svelte/compiler';
import { extractId } from './extract-id';
import { toId, storyNameFromExport } from "@storybook/csf";
function getStaticAttribute(name, node) {
  // extract the attribute
  const attribute = node.attributes.find(att => att.type === 'Attribute' && att.name === name);
  if (!attribute) {
    return undefined;
  }
  const {
    value
  } = attribute;
  // expect the attribute to be static, ie only one Text node
  if (value && value.length === 1 && value[0].type === 'Text') {
    return value[0].data;
  }
  throw new Error(`Attribute ${name} is not static`);
}

/**
 * Parse a Svelte component and extract stories.
 * @param component Component Source
 * @returns Map of storyName -> source
 */
export function extractStories(component) {
  // compile
  const {
    ast
  } = svelte.compile(component);
  const allocatedIds = ['default'];
  const localNames = {
    Story: 'Story',
    Template: 'Template',
    Meta: 'Meta'
  };
  if (ast.instance) {
    svelte.walk(ast.instance, {
      enter(node) {
        if (node.type === 'ImportDeclaration') {
          if (node.source.value === '@storybook/addon-svelte-csf') {
            node.specifiers.filter(n => n.type === 'ImportSpecifier').forEach(n => {
              localNames[n.imported.name] = n.local.name;
            });
          }
          this.skip();
        }
      }
    });

    // extracts allocated Ids
    svelte.walk(ast.instance, {
      enter(node) {
        if (node.type === 'ImportDeclaration') {
          node.specifiers.map(n => n.local.name).forEach(name => allocatedIds.push(name));
          this.skip();
        }
      }
    });
  }
  const stories = {};
  const meta = {};
  svelte.walk(ast.html, {
    enter(node) {
      if (node.type === 'InlineComponent' && (node.name === localNames.Story || node.name === localNames.Template)) {
        this.skip();
        const isTemplate = node.name === 'Template';

        // extract the 'name' attribute
        let name = getStaticAttribute('name', node);

        // templates has a default name
        if (!name && isTemplate) {
          name = 'default';
        }
        const id = extractId({
          id: getStaticAttribute('id', node),
          name
        }, isTemplate ? undefined : allocatedIds);
        if (name && id) {
          // ignore stories without children
          let source;
          if (node.children.length > 0) {
            const {
              start
            } = node.children[0];
            const {
              end
            } = node.children[node.children.length - 1];
            source = dedent(component.substr(start, end - start));
          }
          stories[isTemplate ? `tpl:${id}` : id] = {
            storyId: toId(meta.id || meta.title || id, storyNameFromExport(id)),
            name,
            template: isTemplate,
            source,
            hasArgs: node.attributes.find(att => att.type === 'Let') != null
          };
        }
      } else if (node.type === 'InlineComponent' && node.name === localNames.Meta) {
        this.skip();
        meta.title = getStaticAttribute("title", node);
        meta.id = getStaticAttribute("id", node);
      }
    }
  });
  return {
    meta,
    stories,
    allocatedIds
  };
}