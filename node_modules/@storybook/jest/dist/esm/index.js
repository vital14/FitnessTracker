var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { default as expectPatched } from '@storybook/expect';
import { instrument } from '@storybook/instrumenter';
import * as matchers from '@testing-library/jest-dom/matchers';
import * as mock from 'jest-mock';
var jest = instrument({ jest: mock }).jest;
var expect = instrument({ expect: expectPatched }, { intercept: function (_method, path) { return path[0] !== 'expect'; } }).expect;
// @TODO: This should be reverted once https://github.com/testing-library/jest-dom/pull/438 is merged
// Some bundlers include an undefined `default` in the namespace import,
// or __esmodule (a boolean) which cause expect.extend to throw.
var validMatchers = __assign({}, matchers);
Object.keys(validMatchers).forEach(function (matcherName) {
    var matcher = validMatchers[matcherName];
    if (typeof matcher === 'undefined' || typeof matcher === 'boolean') {
        delete validMatchers[matcherName];
    }
});
expect.extend(validMatchers);
export { expect, jest };
