"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setAndroidVersionAndBuild = exports.checkForAndroidPlatform = exports.ANDROID_CONFIG_FILE = void 0;
const fs = require("fs");
const path = require("path");
const custom_error_1 = require("./custom-error");
exports.ANDROID_CONFIG_FILE = 'android/app/build.gradle';
function checkForAndroidPlatform(dir) {
    const androidFolderPath = path.join(dir, 'android');
    if (!fs.existsSync(androidFolderPath))
        throw new Error(`Invalid Android platform: folder ${androidFolderPath} does not exist`);
    const gradleBuildFilePath = path.join(dir, 'android/app/build.gradle');
    if (!fs.existsSync(gradleBuildFilePath))
        throw new Error(`Invalid Android platform: file ${gradleBuildFilePath} does not exist`);
}
exports.checkForAndroidPlatform = checkForAndroidPlatform;
function setAndroidVersionAndBuild(dir, version, build) {
    const gradleBuildFilePath = path.join(dir, 'android/app/build.gradle');
    let file = openGradleBuildFile(gradleBuildFilePath);
    file = setAndroidVersion(file, version);
    file = setAndroidBuild(file, build);
    saveGradleBuildFile(gradleBuildFilePath, file);
}
exports.setAndroidVersionAndBuild = setAndroidVersionAndBuild;
function openGradleBuildFile(gradleBuildFilePath) {
    return fs.readFileSync(gradleBuildFilePath, 'utf-8');
}
function saveGradleBuildFile(gradleBuildFilePath, file) {
    fs.writeFileSync(gradleBuildFilePath, file, 'utf-8');
}
function setAndroidVersion(file, version) {
    checkIfVersionNameExist(file);
    return file.replace(/(versionName).*/g, `versionName "${version}"`);
}
function checkIfVersionNameExist(file) {
    if (!file.match(/(versionName).*/g)) {
        throw new custom_error_1.default(`Could not find "versionName" in android/app/build.grade file`, {
            code: 'ERR_ANDROID',
            suggestions: ['Add "versionName" your build.gradle file'],
        });
    }
}
function setAndroidBuild(file, build) {
    checkIfVersionCodeExist(file);
    return file.replace(/(versionCode).*/g, `versionCode ${build}`);
}
function checkIfVersionCodeExist(file) {
    if (!file.match(/(versionCode).*/g)) {
        throw new custom_error_1.default(`Could not find "versionCode" in android/app/build.grade file`, {
            code: 'ERR_ANDROID',
            suggestions: ['Add "versionCode" to your build.gradle file'],
        });
    }
}
